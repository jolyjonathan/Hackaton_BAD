name: Deploy GreenShop via Bastion

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            flemoi/greenshop:latest
            flemoi/greenshop:${{ github.sha }}
          cache-from: type=registry,ref=flemoi/greenshop:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Définir explicitement les hôtes cibles pour éviter l'erreur fromJson
        host: ${{ fromJSON(secrets.TARGET_HOSTS) }}
      fail-fast: false
    steps:
      - name: Set up SSH configuration
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Ajouter les hosts connus pour éviter les vérifications interactives
          ssh-keyscan ${{ secrets.BASTION_HOST }} >> ~/.ssh/known_hosts
          
          # Configurer SSH pour utiliser le bastion comme proxy
          cat > ~/.ssh/config << EOF
          Host bastion
            HostName ${{ secrets.BASTION_HOST }}
            User ${{ secrets.BASTION_USER }}
            IdentityFile ~/.ssh/id_rsa
            StrictHostKeyChecking no
          
          Host target*
            HostName %h
            User ${{ secrets.TARGET_USER }}
            IdentityFile ~/.ssh/id_rsa
            ProxyJump bastion
            StrictHostKeyChecking no
          EOF
          
          chmod 600 ~/.ssh/config

      - name: Deploy to target instance through bastion
        run: |
          # Exécuter la commande SSH à travers le bastion vers l'instance cible
          ssh -J ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} ${{ secrets.TARGET_USER }}@${{ matrix.host }} << 'ENDSSH'
            # Vérifier si Docker est installé
            if ! command -v docker &> /dev/null; then
              echo "Docker n'est pas installé, installation en cours..."
              sudo amazon-linux-extras install docker -y || sudo apt-get update && sudo apt-get install -y docker.io
              sudo service docker start
              sudo usermod -a -G docker $USER
              # Utiliser sudo pour cette exécution
              sudo docker pull flemoi/greenshop:${{ github.sha }}
              sudo docker stop greenshop_container || true
              sudo docker rm greenshop_container || true
              sudo docker run -d -p 80:80 --name greenshop_container flemoi/greenshop:${{ github.sha }}
            else
              # Docker est déjà installé
              docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
              docker pull flemoi/greenshop:${{ github.sha }}
              docker stop greenshop_container || true
              docker rm greenshop_container || true
              docker run -d -p 80:80 --name greenshop_container flemoi/greenshop:${{ github.sha }}
            fi
            
            echo "GreenShop déployé avec succès sur $(hostname)"
            docker ps | grep greenshop_container
          ENDSSH

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Notification de déploiement réussi
        run: |
          echo "Le déploiement de GreenShop a été réalisé avec succès sur toutes les instances cibles via le bastion."