name: Debug and Deploy GreenShop

on:
  push:
    branches: [ main ]
  workflow_dispatch:


jobs:
  ssh-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH debug tools
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client netcat-openbsd traceroute dnsutils
      
      - name: Set up SSH key for testing
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
      
      - name: Debug bastion connectivity
        run: |
          echo "======== INFORMATIONS RÉSEAU ========"
          echo "Adresse IP publique du runner GitHub:"
          curl -s ifconfig.me
          
          echo -e "\n======== RÉSOLUTION DNS ========"
          echo "Résolution DNS du bastion:"
          nslookup ${{ secrets.BASTION_HOST }} || echo "Résolution DNS échouée"
          
          echo -e "\n======== TEST DE CONNEXION ========"
          echo "Test de connexion au bastion (port 22):"
          nc -zv -w 10 ${{ secrets.BASTION_HOST }} 22 || echo "Connexion au port 22 échouée"
          
          echo -e "\n======== TENTATIVE SSH DIRECTE ========"
          echo "Tentative de connexion SSH directe au bastion:"
          ssh -v -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} "echo Connexion SSH réussie" || echo "Connexion SSH échouée"
          
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to target instances
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.TARGET_HOSTS }}
          username: ${{ secrets.TARGET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          proxy_host: ${{ secrets.BASTION_HOST }}
          proxy_username: ${{ secrets.BASTION_USER }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_port: 22
          script: |
            echo "Début du déploiement sur $(hostname)"
            
            # Vérifier si Docker est installé
            if ! command -v docker &> /dev/null; then
              echo "Docker n'est pas installé, installation en cours..."
              
              # Détecter la distribution
              if [ -f /etc/os-release ]; then
                . /etc/os-release
                echo "Distribution: $NAME $VERSION_ID"
              fi
              
              # Installation selon la distribution
              if command -v amazon-linux-extras &> /dev/null; then
                echo "Installation via amazon-linux-extras..."
                sudo amazon-linux-extras install docker -y
              elif command -v apt-get &> /dev/null; then
                echo "Installation via apt-get..."
                sudo apt-get update
                sudo apt-get install -y docker.io
              elif command -v yum &> /dev/null; then
                echo "Installation via yum..."
                sudo yum install -y docker
              else
                echo "Méthode d'installation générique..."
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
              fi
              
              echo "Démarrage du service Docker..."
              sudo systemctl start docker || sudo service docker start
              
              echo "Activation du démarrage automatique..."
              sudo systemctl enable docker || true
              
              # Utiliser sudo pour cette exécution
              echo "Téléchargement de l'image Docker..."
              sudo docker pull flemoi/greenshop:latest
              
              echo "Arrêt et suppression du conteneur existant..."
              sudo docker stop greenshop_container || true
              sudo docker rm greenshop_container || true
              
              echo "Démarrage du nouveau conteneur..."
              sudo docker run -d -p 80:80 --name greenshop_container flemoi/greenshop:latest
            else
              echo "Docker est déjà installé. Version: $(docker --version)"
              
              echo "Téléchargement de l'image Docker..."
              docker pull flemoi/greenshop:latest
              
              echo "Arrêt et suppression du conteneur existant..."
              docker stop greenshop_container || true
              docker rm greenshop_container || true
              
              echo "Démarrage du nouveau conteneur..."
              docker run -d -p 80:80 --name greenshop_container flemoi/greenshop:latest
            fi
            
            # Vérification du déploiement
            echo "Vérification que le conteneur est bien démarré..."
            if docker ps | grep greenshop_container; then
              echo "✅ Conteneur démarré avec succès"
              docker logs --tail 20 greenshop_container
            else
              echo "❌ ERREUR: Le conteneur n'est pas démarré!"
              docker ps -a
              exit 1
            fi
            
            echo "GreenShop déployé avec succès sur $(hostname)"