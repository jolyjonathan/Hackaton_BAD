name: Debug and Deploy GreenShop

on:
  push:
    branches: [ main ]
  workflow_dispatch:


jobs:
  ssh-debug:
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH debug tools
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client netcat-openbsd traceroute dnsutils
      
      - name: Set up SSH key for testing
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile=/dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config
      
      - name: Debug bastion connectivity
        run: |
          echo "======== INFORMATIONS R√âSEAU ========"
          echo "Adresse IP publique du runner GitHub:"
          curl -s ifconfig.me
          
          echo -e "\n======== R√âSOLUTION DNS ========"
          echo "R√©solution DNS du bastion:"
          nslookup ${{ secrets.BASTION_HOST }} || echo "R√©solution DNS √©chou√©e"
          
          echo -e "\n======== TEST DE CONNEXION ========"
          echo "Test de connexion au bastion (port 22):"
          nc -zv -w 10 ${{ secrets.BASTION_HOST }} 22 || echo "Connexion au port 22 √©chou√©e"
          
          echo -e "\n======== TENTATIVE SSH DIRECTE ========"
          echo "Tentative de connexion SSH directe au bastion:"
          ssh -v -i ~/.ssh/id_rsa -o ConnectTimeout=10 ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} "echo Connexion SSH r√©ussie" || echo "Connexion SSH √©chou√©e"
  
  network-diagnosis:
    runs-on: ubuntu-latest
    steps:
      - name: Install network tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dnsutils netcat-openbsd traceroute curl mtr iputils-ping

      - name: Basic network information
        run: |
          echo "=== RUNNER INFORMATION ==="
          echo "IP Address: $(curl -s ifconfig.me)"
          echo "Hostname: $(hostname)"
          echo "OS: $(uname -a)"
          
      - name: DNS and connectivity check for bastion
        run: |
          echo "=== DNS CHECK ==="
          nslookup ${{ secrets.BASTION_HOST }} || echo "Failed to resolve hostname"
          
          echo "=== PING CHECK ==="
          ping -c 3 ${{ secrets.BASTION_HOST }} || echo "Ping failed (may be blocked)"
          
          echo "=== PORT SCAN ==="
          for port in 22 80 443; do
            echo "Testing port $port..."
            nc -zv -w 5 ${{ secrets.BASTION_HOST }} $port || echo "Port $port closed or filtered"
          done
          
          echo "=== TRACEROUTE ==="
          traceroute ${{ secrets.BASTION_HOST }} || echo "Traceroute failed"
          
          echo "=== MTR TRACE ==="
          sudo mtr -c 5 -n ${{ secrets.BASTION_HOST }} || echo "MTR trace failed"

      - name: Simple SSH connection test
        run: |
          echo "=== SSH TEST ==="
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "Testing SSH with 10 second timeout..."
          ssh -v -o ConnectTimeout=10 -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} "echo SSH connection successful" || echo "SSH connection failed"

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to target instances
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.TARGET_HOSTS }}
          username: ${{ secrets.TARGET_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          proxy_host: ${{ secrets.BASTION_HOST }}
          proxy_username: ${{ secrets.BASTION_USER }}
          proxy_key: ${{ secrets.SSH_PRIVATE_KEY }}
          proxy_port: 22
          script: |
            echo "D√©but du d√©ploiement sur $(hostname)"
            
            # V√©rifier si des services utilisent le port 80 et les arr√™ter
            echo "V√©rification et arr√™t des services sur le port 80..."
            
            # V√©rifier si un processus utilise le port 80
            PORT_80_PROCESS=$(sudo lsof -i :80 -t || sudo netstat -tulpn | grep ':80 ' | awk '{print $7}' | cut -d'/' -f1 || sudo ss -tulpn | grep ':80 ' | awk '{print $7}' | cut -d',' -f2 | cut -d'=' -f2)
            
            if [ ! -z "$PORT_80_PROCESS" ]; then
              echo "Processus trouv√© sur le port 80: $PORT_80_PROCESS - Tentative d'arr√™t des services courants..."
              
              # Arr√™ter les services web courants
              sudo systemctl stop apache2 || true
              sudo systemctl stop httpd || true
              sudo systemctl stop nginx || true
              sudo systemctl disable apache2 || true
              sudo systemctl disable httpd || true
              sudo systemctl disable nginx || true
              
              # V√©rifier √† nouveau si le port est libre
              if sudo lsof -i :80 -t || sudo netstat -tulpn | grep ':80 ' || sudo ss -tulpn | grep ':80 '; then
                echo "Le port 80 est toujours utilis√©. Tentative de kill brutal des processus..."
                sudo kill -9 $(sudo lsof -i :80 -t) || true
                sleep 2
              fi
            fi
            
            # V√©rifier si Docker est install√©
            if ! command -v docker &> /dev/null; then
              echo "Docker n'est pas install√©, installation en cours..."
              
              # D√©tecter la distribution
              if [ -f /etc/os-release ]; then
                . /etc/os-release
                echo "Distribution: $NAME $VERSION_ID"
              fi
              
              # Installation selon la distribution
              if command -v amazon-linux-extras &> /dev/null; then
                echo "Installation via amazon-linux-extras..."
                sudo amazon-linux-extras install docker -y
              elif command -v apt-get &> /dev/null; then
                echo "Installation via apt-get..."
                sudo apt-get update
                sudo apt-get install -y docker.io
              elif command -v yum &> /dev/null; then
                echo "Installation via yum..."
                sudo yum install -y docker
              else
                echo "M√©thode d'installation g√©n√©rique..."
                curl -fsSL https://get.docker.com -o get-docker.sh
                sudo sh get-docker.sh
              fi
              
              echo "D√©marrage du service Docker..."
              sudo systemctl start docker || sudo service docker start
              
              echo "Activation du d√©marrage automatique..."
              sudo systemctl enable docker || true
            else
              echo "Docker est d√©j√† install√©. Version: $(sudo docker --version)"
            fi
            
            # Toujours utiliser sudo pour Docker
            echo "T√©l√©chargement de l'image Docker..."
            sudo docker pull flemoi/greenshop:latest
            
            echo "Arr√™t et suppression du conteneur existant..."
            sudo docker stop greenshop_container || true
            sudo docker rm greenshop_container || true
            
            # V√©rifier une derni√®re fois si le port 80 est libre
            if sudo lsof -i :80 -t || sudo netstat -tulpn | grep ':80 ' || sudo ss -tulpn | grep ':80 '; then
              echo "AVERTISSEMENT: Le port 80 est toujours utilis√©. Tentative de d√©marrage du conteneur sur le port 8080..."
              sudo docker run -d -p 8080:80 --name greenshop_container flemoi/greenshop:latest
            else
              echo "D√©marrage du nouveau conteneur sur le port 80..."
              sudo docker run -d -p 80:80 --name greenshop_container flemoi/greenshop:latest
            fi
            
            # Attente pour que le conteneur d√©marre compl√®tement
            sleep 3
            
            # V√©rification du d√©ploiement
            echo "V√©rification que le conteneur est bien d√©marr√©..."
            if sudo docker ps | grep greenshop_container; then
              echo "‚úÖ Conteneur d√©marr√© avec succ√®s"
              sudo docker logs --tail 20 greenshop_container
              
              # Afficher l'adresse d'acc√®s
              IP_ADDRESS=$(hostname -I | awk '{print $1}')
              if sudo docker port greenshop_container | grep 8080; then
                echo "üåê Acc√®s √† l'application: http://$IP_ADDRESS:8080"
              else
                echo "üåê Acc√®s √† l'application: http://$IP_ADDRESS"
              fi
            else
              echo "‚ùå ERREUR: Le conteneur n'est pas d√©marr√©!"
              sudo docker ps -a
              sudo docker logs greenshop_container
              exit 1
            fi
            
            echo "GreenShop d√©ploy√© avec succ√®s sur $(hostname)"