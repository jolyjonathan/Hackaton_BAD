stages:
  - build
  - test
  - deploy

variables:
  DOCKER_IMAGE: flemoi/greenshop
  DOCKER_TAG: ${CI_COMMIT_SHORT_SHA}

# Build de l'image Docker
docker-build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker pull $DOCKER_IMAGE:latest || true
    - docker build --cache-from $DOCKER_IMAGE:latest -t $DOCKER_IMAGE:$DOCKER_TAG -t $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
    - docker push $DOCKER_IMAGE:latest
  only:
    - main

# Tests de l'application (basiques)
app-test:
  stage: test
  image: $DOCKER_IMAGE:$DOCKER_TAG
  script:
    - echo "Vérification de base de l'image GreenShop"
    - if [ "$(docker inspect --format='{{.Config.ExposedPorts}}' $DOCKER_IMAGE:$DOCKER_TAG)" != "map[]" ]; then echo "L'image expose bien des ports"; else exit 1; fi
  only:
    - main

# Déploiement sur EC2
deploy-to-ec2:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $EC2_USER@$EC2_HOST "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
    - ssh $EC2_USER@$EC2_HOST "docker pull $DOCKER_IMAGE:$DOCKER_TAG"
    - ssh $EC2_USER@$EC2_HOST "docker stop greenshop_container || true"
    - ssh $EC2_USER@$EC2_HOST "docker rm greenshop_container || true"
    - ssh $EC2_USER@$EC2_HOST "docker run -d -p 80:80 --name greenshop_container $DOCKER_IMAGE:$DOCKER_TAG"
    - echo "GreenShop déployé avec succès sur l'instance EC2"
  only:
    - main
  environment:
    name: production
    url: http://$EC2_HOST
